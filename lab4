e11064@ce-408:~$ utop
No command 'utop' found, did you mean:
 Command 'dtop' from package 'diod' (universe)
 Command 'htop' from package 'htop' (universe)
 Command 'nutop' from package 'nuauth-utils' (universe)
 Command 'itop' from package 'itop' (universe)
 Command 'ntop' from package 'ntop' (universe)
 Command 'stop' from package 'upstart' (main)
 Command 'atop' from package 'atop' (universe)
 Command 'top' from package 'procps' (main)
 Command 'vtop' from package 'util-vserver' (universe)
 Command 'ptop' from package 'fp-utils-2.6.2' (universe)
utop: command not found
e11064@ce-408:~$ eval `opam config env -r /opt/opam`

utop
^C
e11064@ce-408:~$ eval `opam config env -r /opt/opam`
e11064@ce-408:~$ utop
─────────┬────────────────────────────────────────────────────────────┬─────────
         │ Welcome to utop version 1.12 (using OCaml version 4.01.0)! │         
         └────────────────────────────────────────────────────────────┘         

Type #utop_help for help about using utop.

─( 05:30:00 )─< command 0 >──────────────────────────────────────{ counter: 0 }─
utop # 

let crosproduct(x1:float,y1:float,z1:float)(x2:float,y2:float,z2:float)(x3:flaot,y3:float,z3:float):float*float*flaot=
         let a= x1*.x2 *.x3 in
         let b= y1 *. y2 *. y3 in
         let c= z1 *. z2 *. z3 in
    (a,b,c) ;;
Error: Syntax error: ')' expected, the highlighted '(' might be unmatched       ─( 15:10:00 )─< command 1 >──────────────────────────────────────{ counter: 0 }─utop # 

let crosproduct((x1:float),(y1:float),(z1:float))((x2:float),(y2:float),(z2:float))((x3:flaot),(y3:float),(z3:float)):float*float*flaot=
         let a= x1*.x2 *.x3 in
         let b= y1 *. y2 *. y3 in
         let c= z1 *. z2 *. z3 in
    (a,b,c) ;;
Error: Unbound type constructor flaot                                           Did you mean float?                                                             ─( 15:15:46 )─< command 2 >──────────────────────────────────────{ counter: 0 }─
utop # 

let crosproduct((x1:float),(y1:float),(z1:float))((x2:float),(y2:float),(z2:float))((x3:flaot),(y3:float),(z3:float)):float*float*float=
         let a= x1*.x2 *.x3 in
         let b= y1 *. y2 *. y3 in
         let c= z1 *. z2 *. z3 in
    (a,b,c) ;;
Error: Unbound type constructor flaot                                           Did you mean float?                                                             ─( 15:17:09 )─< command 3 >──────────────────────────────────────{ counter: 0 }─
utop # 

let crosproduct((x1:float),(y1:float),(z1:float))((x2:float),(y2:float),(z2:float))((x3:float),(y3:float),(z3:float)):float*float*float=
         let a= x1*.x2 *.x3 in
         let b= y1 *. y2 *. y3 in
         let c= z1 *. z2 *. z3 in
    (a,b,c) ;;
val crosproduct :                                                                 float * float * float ->                                                        float * float * float -> float * float * float -> float * float * float =     
  <fun>
─( 15:17:40 )─< command 4 >──────────────────────────────────────{ counter: 0 }─
utop # crosproduct (1,2,3)(4,5,6)(7,8,9);;
Error: This expression has type int but an expression was expected of type               float                                                                  ─( 15:18:13 )─< command 5 >──────────────────────────────────────{ counter: 0 }─
utop # crosproduct (1.,2.,3.)(4.,5.,6.)(7.,8.,9.);;
- : float * float * float = (28., 80., 162.)                                    ─( 15:19:04 )─< command 6 >──────────────────────────────────────{ counter: 0 }─utop # let rec ack ((m:int),(n:int)):int=
       if m=o then n+1
       else if n=0 && m>0 then ack ((m-1),1)
       else ack ((m-1), ack(m,(n-1))) ;;

Error: Unbound value o                                                          ─( 15:19:21 )─< command 7 >──────────────────────────────────────{ counter: 0 }─utop # let rec ack ((m:int),(n:int)):int=
       if m=0 then n+1
       else if n=0 && m>0 then ack ((m-1),1)
       else ack ((m-1), ack(m,(n-1))) ;;

val ack : int * int -> int = <fun>                                              ─( 15:23:44 )─< command 8 >──────────────────────────────────────{ counter: 0 }─utop # ack (2,1);;
- : int = 5                                                                     ─( 15:24:00 )─< command 9 >──────────────────────────────────────{ counter: 0 }─utop # ack (1,1);;
- : int = 3                                                                     ─( 15:24:17 )─< command 10 >─────────────────────────────────────{ counter: 0 }─utop # ack (2,3);;
- : int = 9                                                                     ─( 15:24:34 )─< command 11 >─────────────────────────────────────{ counter: 0 }─utop # let quadrent ((x:float),(y:float)):string=
        let a= if x=0 then a=0 else if x>0 then 1 else -1 in
        let b= if y=0 then b=0 else if y>0 then 1 else -1 in
    match (a,b) with
      |(1,1)->"1 st Quadrent"
      |(-1,-1)-> "3 rd Quadrent"
      |(0,0)-> "origin"
      |(1,-1)->"4 th Quadrent"
      |(-1,1)->"2 nd Quadreant"
      |(_,_)-> "on axises";;
Error: This expression has type int but an expression was expected of type               float                                                                  ─( 15:25:01 )─< command 12 >─────────────────────────────────────{ counter: 0 }─
utop # let quadrent ((x:float),(y:float)):string=
        let a= if x=0. then a=0. else if x>0. then 1. else -1. in
        let b= if y=0. then b=0. else if y>0. then 1. else -1. in
    match (a,b) with
      |(1.,1.)->"1 st Quadrent"
      |((-1.),(-1.))-> "3 rd Quadrent"
      |(0.,0.)-> "origin"
      |(1.,(-1.))->"4 th Quadrent"
      |((-1.),1.)->"2 nd Quadreant"
      |(_,_)-> "on axises";;
Error: Unbound value a                                                          ─( 15:35:40 )─< command 13 >─────────────────────────────────────{ counter: 0 }─utop # let quadrent ((x:float),(y:float)):string=
        let a= if x=0. then 0. else if x>0. then 1. else -1. in
        let b= if y=0. then 0. else if y>0. then 1. else -1. in
    match (a,b) with
      |(1.,1.)->"1 st Quadrent"
      |((-1.),(-1.))-> "3 rd Quadrent"
      |(0.,0.)-> "origin"
      |(1.,(-1.))->"4 th Quadrent"
      |((-1.),1.)->"2 nd Quadreant"
      |(_,_)-> "on axises";;
val quadrent : float * float -> string = <fun>                                  ─( 15:37:50 )─< command 14 >─────────────────────────────────────{ counter: 0 }─utop # quadrent (2.,0.);;
- : string = "on axises"                                                        ─( 15:39:29 )─< command 15 >─────────────────────────────────────{ counter: 0 }─utop # quadrent (2.,-3.);;
- : string = "4 th Quadrent"                                                    ─( 15:39:55 )─< command 16 >─────────────────────────────────────{ counter: 0 }─utop # let rec ack ((m:int),(n:int)):int=
       let if m=0 then n+1
       else if n=0 && m>0 then ack ((m-1),1)
       else ack ((m-1), ack(m,(n-1))) ;;

Error: Syntax error                                                             ─( 15:40:09 )─< command 17 >─────────────────────────────────────{ counter: 0 }─utop # let rec ack ((m:int),(n:int)):int=
       
        let a= if m>0 then 1 else if m=0 then 0 else -1 in
        let b= if n>0 then 1 else if n=0 then 0 else -1 in
         match (a,b) with
           |(0,_) -> n+1
           |(1,0)-> ack ((m-1),1)
           |(1,1)-> ack ((m-1), ack(m,(n-1))) ;;


Characters 170-291:                                                             Warning 8: this pattern-matching is not exhaustive.                             Here is an example of a value that is not matched:                              
(2, _)
val ack : int * int -> int = <fun>
─( 15:41:00 )─< command 18 >─────────────────────────────────────{ counter: 0 }─
utop # ack (3,2);;
- : int = 29                                                                    ─( 15:46:17 )─< command 19 >─────────────────────────────────────{ counter: 0 }─utop # ack (2,3);;
- : int = 9                                                                     ─( 15:47:05 )─< command 20 >─────────────────────────────────────{ counter: 0 }─utop # ack (2,3);;
- : int = 9                                                                     ─( 15:55:10 )─< command 21 >──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────{ counter: 0 }─utop # ack (2,2);;
- : int = 7                                                                                                                                                                                                                                  ─( 16:02:20 )─< command 22 >─────────────────────────────────────{ counter: 0 }─utop # let mandelbrot ((x:int),(y:int)):string =
   let addc ((x1:int),(y1:int))((x2:int),(y2:int)):int*int=
            let  a = x1+x2 in
            let b= y1+y2 in
        (a,b)  in
   let sqrec ()

